-- Initialize hardware interfaces
local cpu = manager.machine.devices[":maincpu"]
local mem = cpu.spaces["program"]

-- File path for state output
local log_file_path = "C:\\Users\\Patrick Taylor\\PycharmProjects\\dk2\\state_log.txt"

-- Barrel base addresses
local barrel_addresses = {0x6700, 0x6720, 0x6740, 0x6760, 0x6780, 0x67A0, 0x67C0, 0x67E0}

-- Function to log state data
function log_state(data)
    local file = io.open(log_file_path, "a")  -- Open in append mode
    if not file then return end
    
    -- Convert table to string
    local state_str = string.format("Frame %d:\n", data.frame_counter)
    state_str = state_str .. string.format("  Mario: x=%d, y=%d, alive=%d, hammer=%d\n",
        data.mario_x, data.mario_y, data.mario_alive, data.mario_hammer)
    state_str = state_str .. string.format("  Game: level=%d, lives=%d, stage=%d, timer=%d\n",
        data.level, data.lives, data.stage, data.timer)
    state_str = state_str .. string.format("  Score: %02x%02x%02x\n",
        data.score_high, data.score_mid, data.score_low)
    
    -- Add barrel info
    for i, barrel in ipairs(data.barrels) do
        state_str = state_str .. string.format("  Barrel %d: x=%d, y=%d, status=%d, crazy=%d\n",
            i, barrel.x_pos, barrel.y_pos, barrel.status, barrel.crazy_flag)
    end
    state_str = state_str .. "\n"  -- Add blank line between frames
    
    file:write(state_str)
    file:close()
end

function get_barrel_states()
    local barrels = {}
    for _, base_addr in ipairs(barrel_addresses) do
        local status = mem:read_u8(base_addr)
        if status ~= 0 then
            table.insert(barrels, {
                base_addr = base_addr,
                status = mem:read_u8(base_addr),
                crazy_flag = mem:read_u8(base_addr + 0x01),
                motion = mem:read_u8(base_addr + 0x02),
                x_pos = mem:read_u8(base_addr + 0x03),
                y_pos = mem:read_u8(base_addr + 0x05)
            })
        end
    end
    return barrels
end

function capture_game_state()
    local state = {
        frame_counter = frame_counter,
        -- Mario state
        mario_alive = mem:read_u8(0x6200),
        mario_x = mem:read_u8(0x6203),
        mario_y = mem:read_u8(0x6205),
        mario_move_state = mem:read_u8(0x6207),
        mario_on_ladder = mem:read_u8(0x6215),
        mario_jumping = mem:read_u8(0x6216),
        mario_hammer = mem:read_u8(0x6217),
        
        -- Game state
        level = mem:read_u8(0x6227),
        lives = mem:read_u8(0x6228),
        stage = mem:read_u8(0x6229),
        timer = mem:read_u8(0x638C),
        bonus = mem:read_u8(0x62B1),
        difficulty = mem:read_u8(0x6380),
        
        -- Score (raw values)
        score_high = mem:read_u8(0x60B2),
        score_mid = mem:read_u8(0x60B3),
        score_low = mem:read_u8(0x60B4),
        
        -- Barrels
        barrels = get_barrel_states()
    }
    
    return state
end

-- Clear the log file at start
local file = io.open(log_file_path, "w")
if file then
    file:close()
end

-- Initialize frame counter
local frame_counter = 0

-- Main update function
emu.register_frame_done(function()
    frame_counter = frame_counter + 1
    
    -- Log every 10 frames
    if frame_counter % 10 == 0 then
        local state = capture_game_state()
        log_state(state)
    end
end, "frame")